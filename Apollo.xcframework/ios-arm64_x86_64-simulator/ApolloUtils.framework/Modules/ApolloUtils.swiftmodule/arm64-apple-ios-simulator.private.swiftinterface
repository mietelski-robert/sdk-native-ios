// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ApolloUtils
import CommonCrypto
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ApolloExtension<Base> {
  public let base: Base
}
public protocol ApolloCompatible {
  associatedtype Base
  var apollo: ApolloUtils.ApolloExtension<Self.Base> { get }
  static var apollo: ApolloUtils.ApolloExtension<Self.Base>.Type { get }
}
extension ApolloUtils.ApolloCompatible {
  public var apollo: ApolloUtils.ApolloExtension<Self> {
    get
  }
  public static var apollo: ApolloUtils.ApolloExtension<Self>.Type {
    get
  }
}
public protocol OptionalType : Swift.ExpressibleByNilLiteral {
  associatedtype WrappedType
  var underlying: Self.WrappedType? { get }
}
extension Swift.Optional : ApolloUtils.OptionalType {
  public var underlying: Wrapped? {
    get
  }
  public typealias WrappedType = Wrapped
}
public protocol ResultType {
  associatedtype SuccessType
  associatedtype FailureType : Swift.Error
  var underlying: Swift.Result<Self.SuccessType, Self.FailureType> { get }
}
extension Swift.Result : ApolloUtils.ResultType {
  public var underlying: Swift.Result<Success, Failure> {
    get
  }
  public typealias FailureType = Failure
  public typealias SuccessType = Success
}
public protocol DictionaryType : Swift.ExpressibleByDictionaryLiteral {
  associatedtype KeyType : Swift.Hashable
  associatedtype ValueType
  var underlying: [Self.KeyType : Self.ValueType] { get }
}
extension Swift.Dictionary : ApolloUtils.DictionaryType {
  public var underlying: [Key : Value] {
    get
  }
  public typealias KeyType = Key
  public typealias ValueType = Value
}
extension Swift.String : ApolloUtils.ApolloCompatible {
  public typealias Base = Swift.String
}
extension ApolloUtils.ApolloExtension where Base == Swift.String {
  public var sha256Hash: Swift.String {
    get
  }
}
public class Atomic<T> {
  public init(_ value: T)
  public var value: T {
    get
  }
  public func mutate<U>(block: (inout T) -> U) -> U
  @objc deinit
}
extension ApolloUtils.Atomic where T == Swift.Int {
  public func increment() -> T
}
extension ApolloUtils.ApolloExtension where Base : Swift.Collection {
  public var isNotEmpty: Swift.Bool {
    get
  }
}
extension Swift.Array : ApolloUtils.ApolloCompatible {
  public typealias Base = Swift.Array<Element>
}
extension Swift.Dictionary : ApolloUtils.ApolloCompatible {
  public typealias Base = Swift.Dictionary<Key, Value>
}
extension ApolloUtils.ApolloExtension where Base : ApolloUtils.OptionalType, Base.WrappedType : Swift.Collection {
  public var isEmptyOrNil: Swift.Bool {
    get
  }
  public var isNotEmpty: Swift.Bool {
    get
  }
}
